name: QA AI Demo - Automated Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Manual trigger

jobs:
  deploy-and-test:
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Checkout the demo web app
    - name: Checkout Demo Web App
      uses: actions/checkout@v4
      
    # Step 2: Setup simple HTTP server
    - name: Setup Python HTTP Server
      run: |
        python3 -m http.server 8080 &
        echo "HTTP_SERVER_PID=$!" >> $GITHUB_ENV
        sleep 5  # Wait for server to start
        
    # Step 3: Verify app is running
    - name: Verify App is Running
      run: |
        curl -f http://localhost:8080 || exit 1
        echo "‚úÖ Demo app is running on http://localhost:8080"
        
    # Step 4: Checkout QA AI source (temporarily for building)
    - name: Checkout QA AI Source
      uses: actions/checkout@v4
      with:
        repository: floor-licker/qalia
        path: qalia-src
        
    # Step 5: Build and Run QA AI Docker Image
    - name: Build and Run QA AI
      working-directory: qalia-src
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        INPUT_APP_URL: 'http://localhost:8080'
        INPUT_MAX_DEPTH: '3'
        INPUT_TIMEOUT: '300'
        INPUT_HEADLESS: 'true'
        INPUT_FRAMEWORKS: 'playwright,cypress,jest'
        INPUT_OUTPUT_DIR: 'qalia-tests'
        GITHUB_STEP_SUMMARY: ${{ github.step_summary }}
      run: |
        echo "üî® Building QA AI Docker image..."
        docker build -t qalia-local .
        
        echo "üöÄ Running QA AI analysis..."
        docker run --rm \
          --network host \
          -e OPENAI_API_KEY="${OPENAI_API_KEY}" \
          -e INPUT_APP_URL="${INPUT_APP_URL}" \
          -e INPUT_MAX_DEPTH="${INPUT_MAX_DEPTH}" \
          -e INPUT_TIMEOUT="${INPUT_TIMEOUT}" \
          -e INPUT_HEADLESS="${INPUT_HEADLESS}" \
          -e INPUT_FRAMEWORKS="${INPUT_FRAMEWORKS}" \
          -e INPUT_OUTPUT_DIR="${INPUT_OUTPUT_DIR}" \
          -e GITHUB_STEP_SUMMARY="${GITHUB_STEP_SUMMARY}" \
          -e GITHUB_OUTPUT="${GITHUB_OUTPUT}" \
          -v ${{ github.workspace }}:/github/workspace \
          qalia-local
        
    # Step 6: Upload Test Results
    - name: Upload QA AI Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: qalia-test-results
        path: qalia-tests/
        
    # Step 7: Upload Exploration Session Data
    - name: Upload QA AI Session Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: qalia-session-reports
        path: exploration_sessions/
        
    # Step 8: Display Results Summary
    - name: Display QA Results Summary
      if: always()
      run: |
        echo "üéâ QA AI testing completed!"
        echo ""
        echo "üìã **Results are now displayed in the GitHub Actions Summary above!**"
        echo "   Click on the workflow run title to see the detailed report."
        echo ""
        
        if [ -d "qalia-tests" ]; then
          TEST_COUNT=$(find qalia-tests -name "*.spec.ts" -o -name "*.cy.js" -o -name "*.test.js" | wc -l)
          echo "‚úÖ Generated $TEST_COUNT test files"
          echo "üìÅ Test files location: qalia-tests/"
          
          if [ -f "qalia-tests/generation_summary.json" ]; then
            echo "üìä Generation summary available"
          fi
          
          if [ -f "qalia-tests/github-summary.md" ]; then
            echo "üìã GitHub summary report created"
          fi
        else
          echo "‚ö†Ô∏è No test files found in qalia-tests directory"
        fi
        
    # Step 9: Cleanup
    - name: Cleanup
      if: always()
      run: |
        if [ ! -z "$HTTP_SERVER_PID" ]; then
          kill $HTTP_SERVER_PID || echo "Server already stopped"
        fi 