name: QA AI Demo - Automated Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Manual trigger

jobs:
  deploy-and-test:
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Checkout the demo web app
    - name: Checkout Demo Web App
      uses: actions/checkout@v4
      
    # Step 2: Setup simple HTTP server
    - name: Setup Python HTTP Server
      run: |
        python3 -m http.server 8080 &
        echo "HTTP_SERVER_PID=$!" >> $GITHUB_ENV
        sleep 5  # Wait for server to start
        
    # Step 3: Verify app is running
    - name: Verify App is Running
      run: |
        curl -f http://localhost:8080 || exit 1
        echo "‚úÖ Demo app is running on http://localhost:8080"
        
    # Step 4: Checkout QA AI source (temporarily for building)
    - name: Checkout QA AI Source
      uses: actions/checkout@v4
      with:
        repository: floor-licker/qa-ai
        path: qa-ai-src
        
    # Step 5: Build and Run QA AI Docker Image
    - name: Build and Run QA AI
      working-directory: qa-ai-src
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        INPUT_APP_URL: 'http://localhost:8080'
        INPUT_MAX_DEPTH: '3'
        INPUT_TIMEOUT: '300'
        INPUT_HEADLESS: 'true'
        INPUT_FRAMEWORKS: 'playwright,cypress,jest'
        INPUT_OUTPUT_DIR: 'qa-ai-tests'
      run: |
        echo "üî® Building QA AI Docker image..."
        docker build -t qa-ai-local .
        
        echo "üöÄ Running QA AI analysis..."
        docker run --rm \
          --network host \
          -e OPENAI_API_KEY="${OPENAI_API_KEY}" \
          -e INPUT_APP_URL="${INPUT_APP_URL}" \
          -e INPUT_MAX_DEPTH="${INPUT_MAX_DEPTH}" \
          -e INPUT_TIMEOUT="${INPUT_TIMEOUT}" \
          -e INPUT_HEADLESS="${INPUT_HEADLESS}" \
          -e INPUT_FRAMEWORKS="${INPUT_FRAMEWORKS}" \
          -e INPUT_OUTPUT_DIR="${INPUT_OUTPUT_DIR}" \
          -v ${{ github.workspace }}:/github/workspace \
          qa-ai-local
        
    # Step 6: Upload Results
    - name: Upload QA AI Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: qa-ai-test-results
        path: qa-ai-tests/
        
    # Step 7: Display Results Summary
    - name: Display QA Results Summary
      if: always()
      run: |
        echo "üéâ QA AI testing completed!"
        if [ -d "qa-ai-tests" ]; then
          echo "üìÅ Generated test files:"
          find qa-ai-tests -name "*.spec.ts" -o -name "*.cy.js" | head -10
          echo ""
          echo "üìä Total test files: $(find qa-ai-tests -name "*.spec.ts" -o -name "*.cy.js" | wc -l)"
        else
          echo "‚ÑπÔ∏è No test files found in qa-ai-tests directory"
        fi
        
    # Step 8: Cleanup
    - name: Cleanup
      if: always()
      run: |
        if [ ! -z "$HTTP_SERVER_PID" ]; then
          kill $HTTP_SERVER_PID || echo "Server already stopped"
        fi 